# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fap_back', [dirname(__file__)])
        except ImportError:
            import _fap_back
            return _fap_back
        if fp is not None:
            try:
                _mod = imp.load_module('_fap_back', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _fap_back = swig_import_helper()
    del swig_import_helper
else:
    import _fap_back
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


fapPACKET_NO = _fap_back.fapPACKET_NO
fapPACKET_SHORT = _fap_back.fapPACKET_SHORT
fapPACKET_NOBODY = _fap_back.fapPACKET_NOBODY
fapSRCCALL_NOAX25 = _fap_back.fapSRCCALL_NOAX25
fapSRCCALL_BADCHARS = _fap_back.fapSRCCALL_BADCHARS
fapDSTPATH_TOOMANY = _fap_back.fapDSTPATH_TOOMANY
fapDSTCALL_NONE = _fap_back.fapDSTCALL_NONE
fapDSTCALL_NOAX25 = _fap_back.fapDSTCALL_NOAX25
fapDIGICALL_NOAX25 = _fap_back.fapDIGICALL_NOAX25
fapDIGICALL_BADCHARS = _fap_back.fapDIGICALL_BADCHARS
fapTIMESTAMP_INV_LOC = _fap_back.fapTIMESTAMP_INV_LOC
fapTIMESTAMP_INV_OBJ = _fap_back.fapTIMESTAMP_INV_OBJ
fapTIMESTAMP_INV_STA = _fap_back.fapTIMESTAMP_INV_STA
fapTIMESTAMP_INV_GPGGA = _fap_back.fapTIMESTAMP_INV_GPGGA
fapTIMESTAMP_INV_GPGLL = _fap_back.fapTIMESTAMP_INV_GPGLL
fapPACKET_INVALID = _fap_back.fapPACKET_INVALID
fapNMEA_INV_CVAL = _fap_back.fapNMEA_INV_CVAL
fapNMEA_LARGE_EW = _fap_back.fapNMEA_LARGE_EW
fapNMEA_LARGE_NS = _fap_back.fapNMEA_LARGE_NS
fapNMEA_INV_SIGN = _fap_back.fapNMEA_INV_SIGN
fapNMEA_INV_CKSUM = _fap_back.fapNMEA_INV_CKSUM
fapGPRMC_FEWFIELDS = _fap_back.fapGPRMC_FEWFIELDS
fapGPRMC_NOFIX = _fap_back.fapGPRMC_NOFIX
fapGPRMC_INV_TIME = _fap_back.fapGPRMC_INV_TIME
fapGPRMC_INV_DATE = _fap_back.fapGPRMC_INV_DATE
fapGPRMC_DATE_OUT = _fap_back.fapGPRMC_DATE_OUT
fapGPGGA_FEWFIELDS = _fap_back.fapGPGGA_FEWFIELDS
fapGPGGA_NOFIX = _fap_back.fapGPGGA_NOFIX
fapGPGLL_FEWFIELDS = _fap_back.fapGPGLL_FEWFIELDS
fapGPGLL_NOFIX = _fap_back.fapGPGLL_NOFIX
fapNMEA_UNSUPP = _fap_back.fapNMEA_UNSUPP
fapOBJ_SHORT = _fap_back.fapOBJ_SHORT
fapOBJ_INV = _fap_back.fapOBJ_INV
fapOBJ_DEC_ERR = _fap_back.fapOBJ_DEC_ERR
fapITEM_SHORT = _fap_back.fapITEM_SHORT
fapITEM_INV = _fap_back.fapITEM_INV
fapITEM_DEC_ERR = _fap_back.fapITEM_DEC_ERR
fapLOC_SHORT = _fap_back.fapLOC_SHORT
fapLOC_INV = _fap_back.fapLOC_INV
fapLOC_LARGE = _fap_back.fapLOC_LARGE
fapLOC_AMB_INV = _fap_back.fapLOC_AMB_INV
fapMICE_SHORT = _fap_back.fapMICE_SHORT
fapMICE_INV = _fap_back.fapMICE_INV
fapMICE_INV_INFO = _fap_back.fapMICE_INV_INFO
fapMICE_AMB_LARGE = _fap_back.fapMICE_AMB_LARGE
fapMICE_AMB_INV = _fap_back.fapMICE_AMB_INV
fapMICE_AMB_ODD = _fap_back.fapMICE_AMB_ODD
fapCOMP_INV = _fap_back.fapCOMP_INV
fapCOMP_SHORT = _fap_back.fapCOMP_SHORT
fapMSG_INV = _fap_back.fapMSG_INV
fapWX_UNSUPP = _fap_back.fapWX_UNSUPP
fapUSER_UNSUPP = _fap_back.fapUSER_UNSUPP
fapDX_INV_SRC = _fap_back.fapDX_INV_SRC
fapDX_INF_FREQ = _fap_back.fapDX_INF_FREQ
fapDX_NO_DX = _fap_back.fapDX_NO_DX
fapTLM_INV = _fap_back.fapTLM_INV
fapTLM_LARGE = _fap_back.fapTLM_LARGE
fapTLM_UNSUPP = _fap_back.fapTLM_UNSUPP
fapEXP_UNSUPP = _fap_back.fapEXP_UNSUPP
fapSYM_INV_TABLE = _fap_back.fapSYM_INV_TABLE
fapNOT_IMPLEMENTED = _fap_back.fapNOT_IMPLEMENTED
fapNMEA_NOFIELDS = _fap_back.fapNMEA_NOFIELDS
fapNO_APRS = _fap_back.fapNO_APRS
fapLOCATION = _fap_back.fapLOCATION
fapOBJECT = _fap_back.fapOBJECT
fapITEM = _fap_back.fapITEM
fapMICE = _fap_back.fapMICE
fapNMEA = _fap_back.fapNMEA
fapWX = _fap_back.fapWX
fapMESSAGE = _fap_back.fapMESSAGE
fapCAPABILITIES = _fap_back.fapCAPABILITIES
fapSTATUS = _fap_back.fapSTATUS
fapTELEMETRY = _fap_back.fapTELEMETRY
fapTELEMETRY_MESSAGE = _fap_back.fapTELEMETRY_MESSAGE
fapDX_SPOT = _fap_back.fapDX_SPOT
fapEXPERIMENTAL = _fap_back.fapEXPERIMENTAL
fapPOS_COMPRESSED = _fap_back.fapPOS_COMPRESSED
fapPOS_UNCOMPRESSED = _fap_back.fapPOS_UNCOMPRESSED
fapPOS_MICE = _fap_back.fapPOS_MICE
fapPOS_NMEA = _fap_back.fapPOS_NMEA
class fap_wx_report_t(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    wind_gust = _swig_property(_fap_back.fap_wx_report_t_wind_gust_get, _fap_back.fap_wx_report_t_wind_gust_set)
    wind_dir = _swig_property(_fap_back.fap_wx_report_t_wind_dir_get, _fap_back.fap_wx_report_t_wind_dir_set)
    wind_speed = _swig_property(_fap_back.fap_wx_report_t_wind_speed_get, _fap_back.fap_wx_report_t_wind_speed_set)
    temp = _swig_property(_fap_back.fap_wx_report_t_temp_get, _fap_back.fap_wx_report_t_temp_set)
    temp_in = _swig_property(_fap_back.fap_wx_report_t_temp_in_get, _fap_back.fap_wx_report_t_temp_in_set)
    rain_1h = _swig_property(_fap_back.fap_wx_report_t_rain_1h_get, _fap_back.fap_wx_report_t_rain_1h_set)
    rain_24h = _swig_property(_fap_back.fap_wx_report_t_rain_24h_get, _fap_back.fap_wx_report_t_rain_24h_set)
    rain_midnight = _swig_property(_fap_back.fap_wx_report_t_rain_midnight_get, _fap_back.fap_wx_report_t_rain_midnight_set)
    humidity = _swig_property(_fap_back.fap_wx_report_t_humidity_get, _fap_back.fap_wx_report_t_humidity_set)
    humidity_in = _swig_property(_fap_back.fap_wx_report_t_humidity_in_get, _fap_back.fap_wx_report_t_humidity_in_set)
    pressure = _swig_property(_fap_back.fap_wx_report_t_pressure_get, _fap_back.fap_wx_report_t_pressure_set)
    luminosity = _swig_property(_fap_back.fap_wx_report_t_luminosity_get, _fap_back.fap_wx_report_t_luminosity_set)
    snow_24h = _swig_property(_fap_back.fap_wx_report_t_snow_24h_get, _fap_back.fap_wx_report_t_snow_24h_set)
    soft = _swig_property(_fap_back.fap_wx_report_t_soft_get, _fap_back.fap_wx_report_t_soft_set)
    def __init__(self): 
        this = _fap_back.new_fap_wx_report_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fap_back.delete_fap_wx_report_t
    __del__ = lambda self : None;
fap_wx_report_t_swigregister = _fap_back.fap_wx_report_t_swigregister
fap_wx_report_t_swigregister(fap_wx_report_t)

class fap_telemetry_t(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    seq = _swig_property(_fap_back.fap_telemetry_t_seq_get, _fap_back.fap_telemetry_t_seq_set)
    val1 = _swig_property(_fap_back.fap_telemetry_t_val1_get, _fap_back.fap_telemetry_t_val1_set)
    val2 = _swig_property(_fap_back.fap_telemetry_t_val2_get, _fap_back.fap_telemetry_t_val2_set)
    val3 = _swig_property(_fap_back.fap_telemetry_t_val3_get, _fap_back.fap_telemetry_t_val3_set)
    val4 = _swig_property(_fap_back.fap_telemetry_t_val4_get, _fap_back.fap_telemetry_t_val4_set)
    val5 = _swig_property(_fap_back.fap_telemetry_t_val5_get, _fap_back.fap_telemetry_t_val5_set)
    bits = _swig_property(_fap_back.fap_telemetry_t_bits_get, _fap_back.fap_telemetry_t_bits_set)
    def __init__(self): 
        this = _fap_back.new_fap_telemetry_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fap_back.delete_fap_telemetry_t
    __del__ = lambda self : None;
fap_telemetry_t_swigregister = _fap_back.fap_telemetry_t_swigregister
fap_telemetry_t_swigregister(fap_telemetry_t)

class fap_packet_t(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    error_code = _swig_property(_fap_back.fap_packet_t_error_code_get, _fap_back.fap_packet_t_error_code_set)
    type = _swig_property(_fap_back.fap_packet_t_type_get, _fap_back.fap_packet_t_type_set)
    orig_packet = _swig_property(_fap_back.fap_packet_t_orig_packet_get, _fap_back.fap_packet_t_orig_packet_set)
    orig_packet_len = _swig_property(_fap_back.fap_packet_t_orig_packet_len_get, _fap_back.fap_packet_t_orig_packet_len_set)
    header = _swig_property(_fap_back.fap_packet_t_header_get, _fap_back.fap_packet_t_header_set)
    body = _swig_property(_fap_back.fap_packet_t_body_get, _fap_back.fap_packet_t_body_set)
    body_len = _swig_property(_fap_back.fap_packet_t_body_len_get, _fap_back.fap_packet_t_body_len_set)
    src_callsign = _swig_property(_fap_back.fap_packet_t_src_callsign_get, _fap_back.fap_packet_t_src_callsign_set)
    dst_callsign = _swig_property(_fap_back.fap_packet_t_dst_callsign_get, _fap_back.fap_packet_t_dst_callsign_set)
    path = _swig_property(_fap_back.fap_packet_t_path_get, _fap_back.fap_packet_t_path_set)
    path_len = _swig_property(_fap_back.fap_packet_t_path_len_get, _fap_back.fap_packet_t_path_len_set)
    latitude = _swig_property(_fap_back.fap_packet_t_latitude_get, _fap_back.fap_packet_t_latitude_set)
    longitude = _swig_property(_fap_back.fap_packet_t_longitude_get, _fap_back.fap_packet_t_longitude_set)
    format = _swig_property(_fap_back.fap_packet_t_format_get, _fap_back.fap_packet_t_format_set)
    pos_resolution = _swig_property(_fap_back.fap_packet_t_pos_resolution_get, _fap_back.fap_packet_t_pos_resolution_set)
    pos_ambiguity = _swig_property(_fap_back.fap_packet_t_pos_ambiguity_get, _fap_back.fap_packet_t_pos_ambiguity_set)
    dao_datum_byte = _swig_property(_fap_back.fap_packet_t_dao_datum_byte_get, _fap_back.fap_packet_t_dao_datum_byte_set)
    altitude = _swig_property(_fap_back.fap_packet_t_altitude_get, _fap_back.fap_packet_t_altitude_set)
    course = _swig_property(_fap_back.fap_packet_t_course_get, _fap_back.fap_packet_t_course_set)
    speed = _swig_property(_fap_back.fap_packet_t_speed_get, _fap_back.fap_packet_t_speed_set)
    symbol_table = _swig_property(_fap_back.fap_packet_t_symbol_table_get, _fap_back.fap_packet_t_symbol_table_set)
    symbol_code = _swig_property(_fap_back.fap_packet_t_symbol_code_get, _fap_back.fap_packet_t_symbol_code_set)
    messaging = _swig_property(_fap_back.fap_packet_t_messaging_get, _fap_back.fap_packet_t_messaging_set)
    destination = _swig_property(_fap_back.fap_packet_t_destination_get, _fap_back.fap_packet_t_destination_set)
    message = _swig_property(_fap_back.fap_packet_t_message_get, _fap_back.fap_packet_t_message_set)
    message_ack = _swig_property(_fap_back.fap_packet_t_message_ack_get, _fap_back.fap_packet_t_message_ack_set)
    message_nack = _swig_property(_fap_back.fap_packet_t_message_nack_get, _fap_back.fap_packet_t_message_nack_set)
    message_id = _swig_property(_fap_back.fap_packet_t_message_id_get, _fap_back.fap_packet_t_message_id_set)
    comment = _swig_property(_fap_back.fap_packet_t_comment_get, _fap_back.fap_packet_t_comment_set)
    comment_len = _swig_property(_fap_back.fap_packet_t_comment_len_get, _fap_back.fap_packet_t_comment_len_set)
    object_or_item_name = _swig_property(_fap_back.fap_packet_t_object_or_item_name_get, _fap_back.fap_packet_t_object_or_item_name_set)
    alive = _swig_property(_fap_back.fap_packet_t_alive_get, _fap_back.fap_packet_t_alive_set)
    gps_fix_status = _swig_property(_fap_back.fap_packet_t_gps_fix_status_get, _fap_back.fap_packet_t_gps_fix_status_set)
    radio_range = _swig_property(_fap_back.fap_packet_t_radio_range_get, _fap_back.fap_packet_t_radio_range_set)
    phg = _swig_property(_fap_back.fap_packet_t_phg_get, _fap_back.fap_packet_t_phg_set)
    timestamp = _swig_property(_fap_back.fap_packet_t_timestamp_get, _fap_back.fap_packet_t_timestamp_set)
    nmea_checksum_ok = _swig_property(_fap_back.fap_packet_t_nmea_checksum_ok_get, _fap_back.fap_packet_t_nmea_checksum_ok_set)
    wx_report = _swig_property(_fap_back.fap_packet_t_wx_report_get, _fap_back.fap_packet_t_wx_report_set)
    telemetry = _swig_property(_fap_back.fap_packet_t_telemetry_get, _fap_back.fap_packet_t_telemetry_set)
    messagebits = _swig_property(_fap_back.fap_packet_t_messagebits_get, _fap_back.fap_packet_t_messagebits_set)
    status = _swig_property(_fap_back.fap_packet_t_status_get, _fap_back.fap_packet_t_status_set)
    status_len = _swig_property(_fap_back.fap_packet_t_status_len_get, _fap_back.fap_packet_t_status_len_set)
    capabilities = _swig_property(_fap_back.fap_packet_t_capabilities_get, _fap_back.fap_packet_t_capabilities_set)
    capabilities_len = _swig_property(_fap_back.fap_packet_t_capabilities_len_get, _fap_back.fap_packet_t_capabilities_len_set)
    def __init__(self): 
        this = _fap_back.new_fap_packet_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fap_back.delete_fap_packet_t
    __del__ = lambda self : None;
fap_packet_t_swigregister = _fap_back.fap_packet_t_swigregister
fap_packet_t_swigregister(fap_packet_t)


def fap_parseaprs(*args):
  return _fap_back.fap_parseaprs(*args)
fap_parseaprs = _fap_back.fap_parseaprs

def fap_explain_error(*args):
  return _fap_back.fap_explain_error(*args)
fap_explain_error = _fap_back.fap_explain_error

def fap_mice_mbits_to_message(*args):
  return _fap_back.fap_mice_mbits_to_message(*args)
fap_mice_mbits_to_message = _fap_back.fap_mice_mbits_to_message

def fap_distance(*args):
  return _fap_back.fap_distance(*args)
fap_distance = _fap_back.fap_distance

def fap_direction(*args):
  return _fap_back.fap_direction(*args)
fap_direction = _fap_back.fap_direction

def fap_count_digihops(*args):
  return _fap_back.fap_count_digihops(*args)
fap_count_digihops = _fap_back.fap_count_digihops

def fap_check_ax25_call(*args):
  return _fap_back.fap_check_ax25_call(*args)
fap_check_ax25_call = _fap_back.fap_check_ax25_call

def fap_kiss_to_tnc2(*args):
  return _fap_back.fap_kiss_to_tnc2(*args)
fap_kiss_to_tnc2 = _fap_back.fap_kiss_to_tnc2

def fap_tnc2_to_kiss(*args):
  return _fap_back.fap_tnc2_to_kiss(*args)
fap_tnc2_to_kiss = _fap_back.fap_tnc2_to_kiss

def fap_ax25_to_tnc2(*args):
  return _fap_back.fap_ax25_to_tnc2(*args)
fap_ax25_to_tnc2 = _fap_back.fap_ax25_to_tnc2

def fap_tnc2_to_ax25(*args):
  return _fap_back.fap_tnc2_to_ax25(*args)
fap_tnc2_to_ax25 = _fap_back.fap_tnc2_to_ax25

def fap_free(*args):
  return _fap_back.fap_free(*args)
fap_free = _fap_back.fap_free

def fap_init():
  return _fap_back.fap_init()
fap_init = _fap_back.fap_init

def fap_cleanup():
  return _fap_back.fap_cleanup()
fap_cleanup = _fap_back.fap_cleanup

def new_double_p():
  return _fap_back.new_double_p()
new_double_p = _fap_back.new_double_p

def copy_double_p(*args):
  return _fap_back.copy_double_p(*args)
copy_double_p = _fap_back.copy_double_p

def delete_double_p(*args):
  return _fap_back.delete_double_p(*args)
delete_double_p = _fap_back.delete_double_p

def double_p_assign(*args):
  return _fap_back.double_p_assign(*args)
double_p_assign = _fap_back.double_p_assign

def double_p_value(*args):
  return _fap_back.double_p_value(*args)
double_p_value = _fap_back.double_p_value

def new_char_array(*args):
  return _fap_back.new_char_array(*args)
new_char_array = _fap_back.new_char_array

def delete_char_array(*args):
  return _fap_back.delete_char_array(*args)
delete_char_array = _fap_back.delete_char_array

def char_array_getitem(*args):
  return _fap_back.char_array_getitem(*args)
char_array_getitem = _fap_back.char_array_getitem

def char_array_setitem(*args):
  return _fap_back.char_array_setitem(*args)
char_array_setitem = _fap_back.char_array_setitem

def sa_decode_error(*args):
  return _fap_back.sa_decode_error(*args)
sa_decode_error = _fap_back.sa_decode_error


